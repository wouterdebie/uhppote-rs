use super::{Request, RequestResponseType, Response, HEADER};
use bincode::{Decode, Encode};

#[derive(Encode, Request)]
pub struct OpenDoorRequest {
    header: u8,
    message_type: u8,
    _unused: u16,
    device_id: u32,
    door_id: u8,
}

impl OpenDoorRequest {
    pub fn new(device_id: u32, door_id: u8) -> Self {
        Self {
            header: HEADER,
            message_type: RequestResponseType::OpenDoor.into(),
            _unused: 0,
            device_id,
            door_id,
        }
    }
}

#[test]
fn open_door_request_to_bytes() {
    let expected = [
        0x17, 0x40, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
    ];

    let r = OpenDoorRequest::new(423187757, 3);

    let actual = r.to_bytes();
    assert_eq!(expected, actual);
}

#[derive(Decode, Response, Debug)]
pub struct OpenDoorResponse {
    pub header: u8,
    pub message_type: u8,
    _unused: u16,
    pub device_id: u32,
    pub success: bool,
}

#[test]
fn open_door_request_from_bytes() {
    let bytes: [u8; 64] = [
        0x17, 0x40, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
    ];

    let r = OpenDoorResponse::from_bytes(&bytes).unwrap();
    assert_eq!(r.message_type, RequestResponseType::OpenDoor.into());
    assert_eq!(r.device_id, 423187757);
    assert!(r.success);
}
