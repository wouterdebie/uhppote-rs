use super::{Request, RequestResponseType, Response, HEADER};
use bincode::{Decode, Encode};

#[derive(Encode, Request)]
pub struct SetRecordSpecialEventsRequest {
    header: u8,
    message_type: u8,
    _unused: u16,
    device_id: u32,
    enable: bool,
}

impl SetRecordSpecialEventsRequest {
    pub fn new(device_id: u32, enable: bool) -> Self {
        Self {
            header: HEADER,
            message_type: RequestResponseType::SetRecordSpecialEvents.into(),
            _unused: 0,
            device_id,
            enable,
        }
    }
}

#[test]
fn set_record_special_events_request_to_bytes() {
    let expected = [
        0x17, 0x8e, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
    ];

    let r = SetRecordSpecialEventsRequest::new(423187757, true);

    let actual = r.to_bytes();
    assert_eq!(expected, actual);
}

#[derive(Decode, Response, Debug)]
pub struct SetRecordSpecialEventsResponse {
    pub header: u8,
    pub message_type: u8,
    _unused: u16,
    pub device_id: u32,
    pub success: bool,
}

#[test]
fn set_record_special_events_response_from_bytes() {
    let bytes: [u8; 64] = [
        0x17, 0x8e, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];

    let r = SetRecordSpecialEventsResponse::from_bytes(&bytes).unwrap();
    assert_eq!(
        r.message_type,
        RequestResponseType::SetRecordSpecialEvents.into()
    );
    assert!(r.success);
}
