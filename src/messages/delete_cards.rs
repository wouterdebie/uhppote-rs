use super::{Request, RequestResponseType, Response, HEADER};
use bincode::{Decode, Encode};

#[derive(Encode, Request)]
pub struct DeleteCardsRequest {
    header: u8,
    message_type: u8,
    _unused: u16,
    device_id: u32,
    magic_word: u32,
}

impl DeleteCardsRequest {
    pub fn new(device_id: u32, magic_word: u32) -> Self {
        DeleteCardsRequest {
            header: HEADER,
            message_type: RequestResponseType::DeleteCards.into(),
            _unused: 0,
            device_id,
            magic_word,
        }
    }
}

#[derive(Decode, Response, Debug)]
pub struct DeleteCardsResponse {
    pub header: u8,
    pub message_type: u8,
    _unused: u16,
    pub device_id: u32,
    pub success: bool,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn delete_cards_request_to_bytes() {
        let expected = [
            0x17, 0x54, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        let r = DeleteCardsRequest::new(423187757, 0x55aaaa55);

        let actual = r.to_bytes();
        assert_eq!(expected, actual);
    }

    #[test]
    fn delete_cards_response_from_bytes() {
        let bytes: [u8; 64] = [
            0x17, 0x54, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        let r = DeleteCardsResponse::from_bytes(&bytes).unwrap();
        assert_eq!(r.message_type, RequestResponseType::DeleteCards.into());
        assert_eq!(r.device_id, 423187757);
        assert!(r.success);
    }
}
