use super::{Request, RequestResponseType, Response, HEADER};
use bincode::{Decode, Encode};
use std::net::Ipv4Addr;

#[derive(Encode, Request)]
pub struct GetListenerRequest {
    header: u8,
    message_type: u8,
    _unused: u16,
    device_id: u32,
}

impl GetListenerRequest {
    pub fn new(device_id: u32) -> Self {
        Self {
            header: HEADER,
            message_type: RequestResponseType::GetListener.into(),
            _unused: 0,
            device_id,
        }
    }
}

#[derive(Decode, Response, Debug)]
pub struct GetListenerResponse {
    pub header: u8,
    pub message_type: u8,
    _unused: u16,
    pub device_id: u32,
    pub ip_address: Ipv4Addr,
    pub port: u16,
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn get_listener_request_to_bytes() {
        let expected = [
            0x17, 0x92, 0x00, 0x00, 0x2D, 0x55, 0x39, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        let r = GetListenerRequest::new(423187757);

        let actual = r.to_bytes();
        assert_eq!(expected, actual);
    }
    #[test]
    fn get_listener_response_from_bytes() {
        let bytes: [u8; 64] = [
            0x17, 0x92, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0xc0, 0xa8, 0x00, 0xe1, 0x92, 0x26,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        let r = GetListenerResponse::from_bytes(&bytes).unwrap();
        assert_eq!(r.message_type, RequestResponseType::GetListener.into());
        assert_eq!(r.device_id, 423187757);
        assert_eq!(r.ip_address, Ipv4Addr::new(192, 168, 0, 225));
        assert_eq!(r.port, 9874);
    }
}
